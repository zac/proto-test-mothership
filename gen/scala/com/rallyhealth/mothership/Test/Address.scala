// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package com.rallyhealth.mothership.Test

@SerialVersionUID(0L)
final case class Address(
    id: scala.Option[com.rallyhealth.mothership.Test.UUID] = None,
    streetLine1: _root_.scala.Predef.String = "",
    streetLine2: _root_.scala.Predef.String = "",
    city: _root_.scala.Predef.String = "",
    state: _root_.scala.Predef.String = "",
    zip: _root_.scala.Predef.String = "",
    country: _root_.scala.Predef.String = "",
    label: com.rallyhealth.mothership.Test.Address.AddressLabel = com.rallyhealth.mothership.Test.Address.AddressLabel.NONE
    ) extends scalapb.GeneratedMessage with scalapb.Message[Address] with scalapb.lenses.Updatable[Address] {
    @transient
    private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
    private[this] def __computeSerializedValue(): _root_.scala.Int = {
      var __size = 0
      if (id.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(id.get.serializedSize) + id.get.serializedSize }
      if (streetLine1 != "") { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(2, streetLine1) }
      if (streetLine2 != "") { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(3, streetLine2) }
      if (city != "") { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(4, city) }
      if (state != "") { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(5, state) }
      if (zip != "") { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(6, zip) }
      if (country != "") { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(7, country) }
      if (label != com.rallyhealth.mothership.Test.Address.AddressLabel.NONE) { __size += _root_.com.google.protobuf.CodedOutputStream.computeEnumSize(8, label.value) }
      __size
    }
    final override def serializedSize: _root_.scala.Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      id.foreach { __v =>
        _output__.writeTag(1, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
      {
        val __v = streetLine1
        if (__v != "") {
          _output__.writeString(2, __v)
        }
      };
      {
        val __v = streetLine2
        if (__v != "") {
          _output__.writeString(3, __v)
        }
      };
      {
        val __v = city
        if (__v != "") {
          _output__.writeString(4, __v)
        }
      };
      {
        val __v = state
        if (__v != "") {
          _output__.writeString(5, __v)
        }
      };
      {
        val __v = zip
        if (__v != "") {
          _output__.writeString(6, __v)
        }
      };
      {
        val __v = country
        if (__v != "") {
          _output__.writeString(7, __v)
        }
      };
      {
        val __v = label
        if (__v != com.rallyhealth.mothership.Test.Address.AddressLabel.NONE) {
          _output__.writeEnum(8, __v.value)
        }
      };
    }
    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): com.rallyhealth.mothership.Test.Address = {
      var __id = this.id
      var __streetLine1 = this.streetLine1
      var __streetLine2 = this.streetLine2
      var __city = this.city
      var __state = this.state
      var __zip = this.zip
      var __country = this.country
      var __label = this.label
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 10 =>
            __id = Option(_root_.scalapb.LiteParser.readMessage(_input__, __id.getOrElse(com.rallyhealth.mothership.Test.UUID.defaultInstance)))
          case 18 =>
            __streetLine1 = _input__.readString()
          case 26 =>
            __streetLine2 = _input__.readString()
          case 34 =>
            __city = _input__.readString()
          case 42 =>
            __state = _input__.readString()
          case 50 =>
            __zip = _input__.readString()
          case 58 =>
            __country = _input__.readString()
          case 64 =>
            __label = com.rallyhealth.mothership.Test.Address.AddressLabel.fromValue(_input__.readEnum())
          case tag => _input__.skipField(tag)
        }
      }
      com.rallyhealth.mothership.Test.Address(
          id = __id,
          streetLine1 = __streetLine1,
          streetLine2 = __streetLine2,
          city = __city,
          state = __state,
          zip = __zip,
          country = __country,
          label = __label
      )
    }
    def getId: com.rallyhealth.mothership.Test.UUID = id.getOrElse(com.rallyhealth.mothership.Test.UUID.defaultInstance)
    def clearId: Address = copy(id = None)
    def withId(__v: com.rallyhealth.mothership.Test.UUID): Address = copy(id = Option(__v))
    def withStreetLine1(__v: _root_.scala.Predef.String): Address = copy(streetLine1 = __v)
    def withStreetLine2(__v: _root_.scala.Predef.String): Address = copy(streetLine2 = __v)
    def withCity(__v: _root_.scala.Predef.String): Address = copy(city = __v)
    def withState(__v: _root_.scala.Predef.String): Address = copy(state = __v)
    def withZip(__v: _root_.scala.Predef.String): Address = copy(zip = __v)
    def withCountry(__v: _root_.scala.Predef.String): Address = copy(country = __v)
    def withLabel(__v: com.rallyhealth.mothership.Test.Address.AddressLabel): Address = copy(label = __v)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => id.orNull
        case 2 => {
          val __t = streetLine1
          if (__t != "") __t else null
        }
        case 3 => {
          val __t = streetLine2
          if (__t != "") __t else null
        }
        case 4 => {
          val __t = city
          if (__t != "") __t else null
        }
        case 5 => {
          val __t = state
          if (__t != "") __t else null
        }
        case 6 => {
          val __t = zip
          if (__t != "") __t else null
        }
        case 7 => {
          val __t = country
          if (__t != "") __t else null
        }
        case 8 => {
          val __t = label.javaValueDescriptor
          if (__t.getNumber() != 0) __t else null
        }
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => id.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 2 => _root_.scalapb.descriptors.PString(streetLine1)
        case 3 => _root_.scalapb.descriptors.PString(streetLine2)
        case 4 => _root_.scalapb.descriptors.PString(city)
        case 5 => _root_.scalapb.descriptors.PString(state)
        case 6 => _root_.scalapb.descriptors.PString(zip)
        case 7 => _root_.scalapb.descriptors.PString(country)
        case 8 => _root_.scalapb.descriptors.PEnum(label.scalaValueDescriptor)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion = com.rallyhealth.mothership.Test.Address
}

object Address extends scalapb.GeneratedMessageCompanion[com.rallyhealth.mothership.Test.Address] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[com.rallyhealth.mothership.Test.Address] = this
  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): com.rallyhealth.mothership.Test.Address = {
    require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
    val __fields = javaDescriptor.getFields
    com.rallyhealth.mothership.Test.Address(
      __fieldsMap.get(__fields.get(0)).asInstanceOf[scala.Option[com.rallyhealth.mothership.Test.UUID]],
      __fieldsMap.getOrElse(__fields.get(1), "").asInstanceOf[_root_.scala.Predef.String],
      __fieldsMap.getOrElse(__fields.get(2), "").asInstanceOf[_root_.scala.Predef.String],
      __fieldsMap.getOrElse(__fields.get(3), "").asInstanceOf[_root_.scala.Predef.String],
      __fieldsMap.getOrElse(__fields.get(4), "").asInstanceOf[_root_.scala.Predef.String],
      __fieldsMap.getOrElse(__fields.get(5), "").asInstanceOf[_root_.scala.Predef.String],
      __fieldsMap.getOrElse(__fields.get(6), "").asInstanceOf[_root_.scala.Predef.String],
      com.rallyhealth.mothership.Test.Address.AddressLabel.fromValue(__fieldsMap.getOrElse(__fields.get(7), com.rallyhealth.mothership.Test.Address.AddressLabel.NONE.javaValueDescriptor).asInstanceOf[_root_.com.google.protobuf.Descriptors.EnumValueDescriptor].getNumber)
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[com.rallyhealth.mothership.Test.Address] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      com.rallyhealth.mothership.Test.Address(
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).flatMap(_.as[scala.Option[com.rallyhealth.mothership.Test.UUID]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(5).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(6).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(7).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        com.rallyhealth.mothership.Test.Address.AddressLabel.fromValue(__fieldsMap.get(scalaDescriptor.findFieldByNumber(8).get).map(_.as[_root_.scalapb.descriptors.EnumValueDescriptor]).getOrElse(com.rallyhealth.mothership.Test.Address.AddressLabel.NONE.scalaValueDescriptor).number)
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = TestProto.javaDescriptor.getMessageTypes.get(2)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = TestProto.scalaDescriptor.messages(2)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
    (__number: @_root_.scala.unchecked) match {
      case 1 => __out = com.rallyhealth.mothership.Test.UUID
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = {
    (__fieldNumber: @_root_.scala.unchecked) match {
      case 8 => com.rallyhealth.mothership.Test.Address.AddressLabel
    }
  }
  lazy val defaultInstance = com.rallyhealth.mothership.Test.Address(
  )
  sealed trait AddressLabel extends _root_.scalapb.GeneratedEnum {
    type EnumType = AddressLabel
    def isNone: _root_.scala.Boolean = false
    def isOther: _root_.scala.Boolean = false
    def isHome: _root_.scala.Boolean = false
    def isWork: _root_.scala.Boolean = false
    def isDoctor: _root_.scala.Boolean = false
    def companion: _root_.scalapb.GeneratedEnumCompanion[AddressLabel] = com.rallyhealth.mothership.Test.Address.AddressLabel
  }
  
  object AddressLabel extends _root_.scalapb.GeneratedEnumCompanion[AddressLabel] {
    implicit def enumCompanion: _root_.scalapb.GeneratedEnumCompanion[AddressLabel] = this
    @SerialVersionUID(0L)
    case object NONE extends AddressLabel {
      val value = 0
      val index = 0
      val name = "NONE"
      override def isNone: _root_.scala.Boolean = true
    }
    
    @SerialVersionUID(0L)
    case object OTHER extends AddressLabel {
      val value = 1
      val index = 1
      val name = "OTHER"
      override def isOther: _root_.scala.Boolean = true
    }
    
    @SerialVersionUID(0L)
    case object HOME extends AddressLabel {
      val value = 2
      val index = 2
      val name = "HOME"
      override def isHome: _root_.scala.Boolean = true
    }
    
    @SerialVersionUID(0L)
    case object WORK extends AddressLabel {
      val value = 3
      val index = 3
      val name = "WORK"
      override def isWork: _root_.scala.Boolean = true
    }
    
    @SerialVersionUID(0L)
    case object DOCTOR extends AddressLabel {
      val value = 4
      val index = 4
      val name = "DOCTOR"
      override def isDoctor: _root_.scala.Boolean = true
    }
    
    @SerialVersionUID(0L)
    final case class Unrecognized(value: _root_.scala.Int) extends AddressLabel with _root_.scalapb.UnrecognizedEnum
    
    lazy val values = scala.collection.Seq(NONE, OTHER, HOME, WORK, DOCTOR)
    def fromValue(value: _root_.scala.Int): AddressLabel = value match {
      case 0 => NONE
      case 1 => OTHER
      case 2 => HOME
      case 3 => WORK
      case 4 => DOCTOR
      case __other => Unrecognized(__other)
    }
    def javaDescriptor: _root_.com.google.protobuf.Descriptors.EnumDescriptor = com.rallyhealth.mothership.Test.Address.javaDescriptor.getEnumTypes.get(0)
    def scalaDescriptor: _root_.scalapb.descriptors.EnumDescriptor = com.rallyhealth.mothership.Test.Address.scalaDescriptor.enums(0)
  }
  implicit class AddressLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, com.rallyhealth.mothership.Test.Address]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, com.rallyhealth.mothership.Test.Address](_l) {
    def id: _root_.scalapb.lenses.Lens[UpperPB, com.rallyhealth.mothership.Test.UUID] = field(_.getId)((c_, f_) => c_.copy(id = Option(f_)))
    def optionalId: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[com.rallyhealth.mothership.Test.UUID]] = field(_.id)((c_, f_) => c_.copy(id = f_))
    def streetLine1: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.streetLine1)((c_, f_) => c_.copy(streetLine1 = f_))
    def streetLine2: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.streetLine2)((c_, f_) => c_.copy(streetLine2 = f_))
    def city: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.city)((c_, f_) => c_.copy(city = f_))
    def state: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.state)((c_, f_) => c_.copy(state = f_))
    def zip: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.zip)((c_, f_) => c_.copy(zip = f_))
    def country: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.country)((c_, f_) => c_.copy(country = f_))
    def label: _root_.scalapb.lenses.Lens[UpperPB, com.rallyhealth.mothership.Test.Address.AddressLabel] = field(_.label)((c_, f_) => c_.copy(label = f_))
  }
  final val ID_FIELD_NUMBER = 1
  final val STREET_LINE_1_FIELD_NUMBER = 2
  final val STREET_LINE_2_FIELD_NUMBER = 3
  final val CITY_FIELD_NUMBER = 4
  final val STATE_FIELD_NUMBER = 5
  final val ZIP_FIELD_NUMBER = 6
  final val COUNTRY_FIELD_NUMBER = 7
  final val LABEL_FIELD_NUMBER = 8
}
