// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package com.rallyhealth.mothership.Test

@SerialVersionUID(0L)
final case class Contact(
    id: scala.Option[com.rallyhealth.mothership.Test.UUID] = None,
    firstName: _root_.scala.Predef.String = "",
    middleName: _root_.scala.Predef.String = "",
    lastName: _root_.scala.Predef.String = "",
    phone: _root_.scala.collection.Seq[com.rallyhealth.mothership.Test.Phone] = _root_.scala.collection.Seq.empty,
    address: _root_.scala.collection.Seq[com.rallyhealth.mothership.Test.Address] = _root_.scala.collection.Seq.empty
    ) extends scalapb.GeneratedMessage with scalapb.Message[Contact] with scalapb.lenses.Updatable[Contact] {
    @transient
    private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
    private[this] def __computeSerializedValue(): _root_.scala.Int = {
      var __size = 0
      if (id.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(id.get.serializedSize) + id.get.serializedSize }
      if (firstName != "") { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(2, firstName) }
      if (middleName != "") { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(3, middleName) }
      if (lastName != "") { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(4, lastName) }
      phone.foreach(phone => __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(phone.serializedSize) + phone.serializedSize)
      address.foreach(address => __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(address.serializedSize) + address.serializedSize)
      __size
    }
    final override def serializedSize: _root_.scala.Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      id.foreach { __v =>
        _output__.writeTag(1, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
      {
        val __v = firstName
        if (__v != "") {
          _output__.writeString(2, __v)
        }
      };
      {
        val __v = middleName
        if (__v != "") {
          _output__.writeString(3, __v)
        }
      };
      {
        val __v = lastName
        if (__v != "") {
          _output__.writeString(4, __v)
        }
      };
      phone.foreach { __v =>
        _output__.writeTag(5, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
      address.foreach { __v =>
        _output__.writeTag(6, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
    }
    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): com.rallyhealth.mothership.Test.Contact = {
      var __id = this.id
      var __firstName = this.firstName
      var __middleName = this.middleName
      var __lastName = this.lastName
      val __phone = (_root_.scala.collection.immutable.Vector.newBuilder[com.rallyhealth.mothership.Test.Phone] ++= this.phone)
      val __address = (_root_.scala.collection.immutable.Vector.newBuilder[com.rallyhealth.mothership.Test.Address] ++= this.address)
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 10 =>
            __id = Option(_root_.scalapb.LiteParser.readMessage(_input__, __id.getOrElse(com.rallyhealth.mothership.Test.UUID.defaultInstance)))
          case 18 =>
            __firstName = _input__.readString()
          case 26 =>
            __middleName = _input__.readString()
          case 34 =>
            __lastName = _input__.readString()
          case 42 =>
            __phone += _root_.scalapb.LiteParser.readMessage(_input__, com.rallyhealth.mothership.Test.Phone.defaultInstance)
          case 50 =>
            __address += _root_.scalapb.LiteParser.readMessage(_input__, com.rallyhealth.mothership.Test.Address.defaultInstance)
          case tag => _input__.skipField(tag)
        }
      }
      com.rallyhealth.mothership.Test.Contact(
          id = __id,
          firstName = __firstName,
          middleName = __middleName,
          lastName = __lastName,
          phone = __phone.result(),
          address = __address.result()
      )
    }
    def getId: com.rallyhealth.mothership.Test.UUID = id.getOrElse(com.rallyhealth.mothership.Test.UUID.defaultInstance)
    def clearId: Contact = copy(id = None)
    def withId(__v: com.rallyhealth.mothership.Test.UUID): Contact = copy(id = Option(__v))
    def withFirstName(__v: _root_.scala.Predef.String): Contact = copy(firstName = __v)
    def withMiddleName(__v: _root_.scala.Predef.String): Contact = copy(middleName = __v)
    def withLastName(__v: _root_.scala.Predef.String): Contact = copy(lastName = __v)
    def clearPhone = copy(phone = _root_.scala.collection.Seq.empty)
    def addPhone(__vs: com.rallyhealth.mothership.Test.Phone*): Contact = addAllPhone(__vs)
    def addAllPhone(__vs: TraversableOnce[com.rallyhealth.mothership.Test.Phone]): Contact = copy(phone = phone ++ __vs)
    def withPhone(__v: _root_.scala.collection.Seq[com.rallyhealth.mothership.Test.Phone]): Contact = copy(phone = __v)
    def clearAddress = copy(address = _root_.scala.collection.Seq.empty)
    def addAddress(__vs: com.rallyhealth.mothership.Test.Address*): Contact = addAllAddress(__vs)
    def addAllAddress(__vs: TraversableOnce[com.rallyhealth.mothership.Test.Address]): Contact = copy(address = address ++ __vs)
    def withAddress(__v: _root_.scala.collection.Seq[com.rallyhealth.mothership.Test.Address]): Contact = copy(address = __v)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => id.orNull
        case 2 => {
          val __t = firstName
          if (__t != "") __t else null
        }
        case 3 => {
          val __t = middleName
          if (__t != "") __t else null
        }
        case 4 => {
          val __t = lastName
          if (__t != "") __t else null
        }
        case 5 => phone
        case 6 => address
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => id.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 2 => _root_.scalapb.descriptors.PString(firstName)
        case 3 => _root_.scalapb.descriptors.PString(middleName)
        case 4 => _root_.scalapb.descriptors.PString(lastName)
        case 5 => _root_.scalapb.descriptors.PRepeated(phone.map(_.toPMessage)(_root_.scala.collection.breakOut))
        case 6 => _root_.scalapb.descriptors.PRepeated(address.map(_.toPMessage)(_root_.scala.collection.breakOut))
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion = com.rallyhealth.mothership.Test.Contact
}

object Contact extends scalapb.GeneratedMessageCompanion[com.rallyhealth.mothership.Test.Contact] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[com.rallyhealth.mothership.Test.Contact] = this
  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): com.rallyhealth.mothership.Test.Contact = {
    require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
    val __fields = javaDescriptor.getFields
    com.rallyhealth.mothership.Test.Contact(
      __fieldsMap.get(__fields.get(0)).asInstanceOf[scala.Option[com.rallyhealth.mothership.Test.UUID]],
      __fieldsMap.getOrElse(__fields.get(1), "").asInstanceOf[_root_.scala.Predef.String],
      __fieldsMap.getOrElse(__fields.get(2), "").asInstanceOf[_root_.scala.Predef.String],
      __fieldsMap.getOrElse(__fields.get(3), "").asInstanceOf[_root_.scala.Predef.String],
      __fieldsMap.getOrElse(__fields.get(4), Nil).asInstanceOf[_root_.scala.collection.Seq[com.rallyhealth.mothership.Test.Phone]],
      __fieldsMap.getOrElse(__fields.get(5), Nil).asInstanceOf[_root_.scala.collection.Seq[com.rallyhealth.mothership.Test.Address]]
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[com.rallyhealth.mothership.Test.Contact] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      com.rallyhealth.mothership.Test.Contact(
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).flatMap(_.as[scala.Option[com.rallyhealth.mothership.Test.UUID]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(5).get).map(_.as[_root_.scala.collection.Seq[com.rallyhealth.mothership.Test.Phone]]).getOrElse(_root_.scala.collection.Seq.empty),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(6).get).map(_.as[_root_.scala.collection.Seq[com.rallyhealth.mothership.Test.Address]]).getOrElse(_root_.scala.collection.Seq.empty)
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = TestProto.javaDescriptor.getMessageTypes.get(1)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = TestProto.scalaDescriptor.messages(1)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
    (__number: @_root_.scala.unchecked) match {
      case 1 => __out = com.rallyhealth.mothership.Test.UUID
      case 5 => __out = com.rallyhealth.mothership.Test.Phone
      case 6 => __out = com.rallyhealth.mothership.Test.Address
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = com.rallyhealth.mothership.Test.Contact(
  )
  implicit class ContactLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, com.rallyhealth.mothership.Test.Contact]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, com.rallyhealth.mothership.Test.Contact](_l) {
    def id: _root_.scalapb.lenses.Lens[UpperPB, com.rallyhealth.mothership.Test.UUID] = field(_.getId)((c_, f_) => c_.copy(id = Option(f_)))
    def optionalId: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[com.rallyhealth.mothership.Test.UUID]] = field(_.id)((c_, f_) => c_.copy(id = f_))
    def firstName: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.firstName)((c_, f_) => c_.copy(firstName = f_))
    def middleName: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.middleName)((c_, f_) => c_.copy(middleName = f_))
    def lastName: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.lastName)((c_, f_) => c_.copy(lastName = f_))
    def phone: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.collection.Seq[com.rallyhealth.mothership.Test.Phone]] = field(_.phone)((c_, f_) => c_.copy(phone = f_))
    def address: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.collection.Seq[com.rallyhealth.mothership.Test.Address]] = field(_.address)((c_, f_) => c_.copy(address = f_))
  }
  final val ID_FIELD_NUMBER = 1
  final val FIRST_NAME_FIELD_NUMBER = 2
  final val MIDDLE_NAME_FIELD_NUMBER = 3
  final val LAST_NAME_FIELD_NUMBER = 4
  final val PHONE_FIELD_NUMBER = 5
  final val ADDRESS_FIELD_NUMBER = 6
}
