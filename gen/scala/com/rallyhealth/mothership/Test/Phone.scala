// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package com.rallyhealth.mothership.Test

@SerialVersionUID(0L)
final case class Phone(
    id: scala.Option[com.rallyhealth.mothership.Test.UUID] = None,
    countryCode: _root_.scala.Predef.String = "",
    areaNumber: _root_.scala.Predef.String = "",
    phoneNumber: _root_.scala.Predef.String = "",
    `type`: com.rallyhealth.mothership.Test.Phone.PhoneType = com.rallyhealth.mothership.Test.Phone.PhoneType.NONE
    ) extends scalapb.GeneratedMessage with scalapb.Message[Phone] with scalapb.lenses.Updatable[Phone] {
    @transient
    private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
    private[this] def __computeSerializedValue(): _root_.scala.Int = {
      var __size = 0
      if (id.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(id.get.serializedSize) + id.get.serializedSize }
      if (countryCode != "") { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(2, countryCode) }
      if (areaNumber != "") { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(3, areaNumber) }
      if (phoneNumber != "") { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(4, phoneNumber) }
      if (`type` != com.rallyhealth.mothership.Test.Phone.PhoneType.NONE) { __size += _root_.com.google.protobuf.CodedOutputStream.computeEnumSize(5, `type`.value) }
      __size
    }
    final override def serializedSize: _root_.scala.Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      id.foreach { __v =>
        _output__.writeTag(1, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
      {
        val __v = countryCode
        if (__v != "") {
          _output__.writeString(2, __v)
        }
      };
      {
        val __v = areaNumber
        if (__v != "") {
          _output__.writeString(3, __v)
        }
      };
      {
        val __v = phoneNumber
        if (__v != "") {
          _output__.writeString(4, __v)
        }
      };
      {
        val __v = `type`
        if (__v != com.rallyhealth.mothership.Test.Phone.PhoneType.NONE) {
          _output__.writeEnum(5, __v.value)
        }
      };
    }
    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): com.rallyhealth.mothership.Test.Phone = {
      var __id = this.id
      var __countryCode = this.countryCode
      var __areaNumber = this.areaNumber
      var __phoneNumber = this.phoneNumber
      var __type = this.`type`
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 10 =>
            __id = Option(_root_.scalapb.LiteParser.readMessage(_input__, __id.getOrElse(com.rallyhealth.mothership.Test.UUID.defaultInstance)))
          case 18 =>
            __countryCode = _input__.readString()
          case 26 =>
            __areaNumber = _input__.readString()
          case 34 =>
            __phoneNumber = _input__.readString()
          case 40 =>
            __type = com.rallyhealth.mothership.Test.Phone.PhoneType.fromValue(_input__.readEnum())
          case tag => _input__.skipField(tag)
        }
      }
      com.rallyhealth.mothership.Test.Phone(
          id = __id,
          countryCode = __countryCode,
          areaNumber = __areaNumber,
          phoneNumber = __phoneNumber,
          `type` = __type
      )
    }
    def getId: com.rallyhealth.mothership.Test.UUID = id.getOrElse(com.rallyhealth.mothership.Test.UUID.defaultInstance)
    def clearId: Phone = copy(id = None)
    def withId(__v: com.rallyhealth.mothership.Test.UUID): Phone = copy(id = Option(__v))
    def withCountryCode(__v: _root_.scala.Predef.String): Phone = copy(countryCode = __v)
    def withAreaNumber(__v: _root_.scala.Predef.String): Phone = copy(areaNumber = __v)
    def withPhoneNumber(__v: _root_.scala.Predef.String): Phone = copy(phoneNumber = __v)
    def withType(__v: com.rallyhealth.mothership.Test.Phone.PhoneType): Phone = copy(`type` = __v)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => id.orNull
        case 2 => {
          val __t = countryCode
          if (__t != "") __t else null
        }
        case 3 => {
          val __t = areaNumber
          if (__t != "") __t else null
        }
        case 4 => {
          val __t = phoneNumber
          if (__t != "") __t else null
        }
        case 5 => {
          val __t = `type`.javaValueDescriptor
          if (__t.getNumber() != 0) __t else null
        }
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => id.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 2 => _root_.scalapb.descriptors.PString(countryCode)
        case 3 => _root_.scalapb.descriptors.PString(areaNumber)
        case 4 => _root_.scalapb.descriptors.PString(phoneNumber)
        case 5 => _root_.scalapb.descriptors.PEnum(`type`.scalaValueDescriptor)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion = com.rallyhealth.mothership.Test.Phone
}

object Phone extends scalapb.GeneratedMessageCompanion[com.rallyhealth.mothership.Test.Phone] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[com.rallyhealth.mothership.Test.Phone] = this
  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): com.rallyhealth.mothership.Test.Phone = {
    require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
    val __fields = javaDescriptor.getFields
    com.rallyhealth.mothership.Test.Phone(
      __fieldsMap.get(__fields.get(0)).asInstanceOf[scala.Option[com.rallyhealth.mothership.Test.UUID]],
      __fieldsMap.getOrElse(__fields.get(1), "").asInstanceOf[_root_.scala.Predef.String],
      __fieldsMap.getOrElse(__fields.get(2), "").asInstanceOf[_root_.scala.Predef.String],
      __fieldsMap.getOrElse(__fields.get(3), "").asInstanceOf[_root_.scala.Predef.String],
      com.rallyhealth.mothership.Test.Phone.PhoneType.fromValue(__fieldsMap.getOrElse(__fields.get(4), com.rallyhealth.mothership.Test.Phone.PhoneType.NONE.javaValueDescriptor).asInstanceOf[_root_.com.google.protobuf.Descriptors.EnumValueDescriptor].getNumber)
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[com.rallyhealth.mothership.Test.Phone] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      com.rallyhealth.mothership.Test.Phone(
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).flatMap(_.as[scala.Option[com.rallyhealth.mothership.Test.UUID]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        com.rallyhealth.mothership.Test.Phone.PhoneType.fromValue(__fieldsMap.get(scalaDescriptor.findFieldByNumber(5).get).map(_.as[_root_.scalapb.descriptors.EnumValueDescriptor]).getOrElse(com.rallyhealth.mothership.Test.Phone.PhoneType.NONE.scalaValueDescriptor).number)
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = TestProto.javaDescriptor.getMessageTypes.get(3)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = TestProto.scalaDescriptor.messages(3)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
    (__number: @_root_.scala.unchecked) match {
      case 1 => __out = com.rallyhealth.mothership.Test.UUID
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = {
    (__fieldNumber: @_root_.scala.unchecked) match {
      case 5 => com.rallyhealth.mothership.Test.Phone.PhoneType
    }
  }
  lazy val defaultInstance = com.rallyhealth.mothership.Test.Phone(
  )
  sealed trait PhoneType extends _root_.scalapb.GeneratedEnum {
    type EnumType = PhoneType
    def isNone: _root_.scala.Boolean = false
    def isOther: _root_.scala.Boolean = false
    def isMobile: _root_.scala.Boolean = false
    def isLandline: _root_.scala.Boolean = false
    def isFax: _root_.scala.Boolean = false
    def isTty: _root_.scala.Boolean = false
    def companion: _root_.scalapb.GeneratedEnumCompanion[PhoneType] = com.rallyhealth.mothership.Test.Phone.PhoneType
  }
  
  object PhoneType extends _root_.scalapb.GeneratedEnumCompanion[PhoneType] {
    implicit def enumCompanion: _root_.scalapb.GeneratedEnumCompanion[PhoneType] = this
    @SerialVersionUID(0L)
    case object NONE extends PhoneType {
      val value = 0
      val index = 0
      val name = "NONE"
      override def isNone: _root_.scala.Boolean = true
    }
    
    @SerialVersionUID(0L)
    case object OTHER extends PhoneType {
      val value = 1
      val index = 1
      val name = "OTHER"
      override def isOther: _root_.scala.Boolean = true
    }
    
    @SerialVersionUID(0L)
    case object MOBILE extends PhoneType {
      val value = 2
      val index = 2
      val name = "MOBILE"
      override def isMobile: _root_.scala.Boolean = true
    }
    
    @SerialVersionUID(0L)
    case object LANDLINE extends PhoneType {
      val value = 3
      val index = 3
      val name = "LANDLINE"
      override def isLandline: _root_.scala.Boolean = true
    }
    
    @SerialVersionUID(0L)
    case object FAX extends PhoneType {
      val value = 4
      val index = 4
      val name = "FAX"
      override def isFax: _root_.scala.Boolean = true
    }
    
    @SerialVersionUID(0L)
    case object TTY extends PhoneType {
      val value = 5
      val index = 5
      val name = "TTY"
      override def isTty: _root_.scala.Boolean = true
    }
    
    @SerialVersionUID(0L)
    final case class Unrecognized(value: _root_.scala.Int) extends PhoneType with _root_.scalapb.UnrecognizedEnum
    
    lazy val values = scala.collection.Seq(NONE, OTHER, MOBILE, LANDLINE, FAX, TTY)
    def fromValue(value: _root_.scala.Int): PhoneType = value match {
      case 0 => NONE
      case 1 => OTHER
      case 2 => MOBILE
      case 3 => LANDLINE
      case 4 => FAX
      case 5 => TTY
      case __other => Unrecognized(__other)
    }
    def javaDescriptor: _root_.com.google.protobuf.Descriptors.EnumDescriptor = com.rallyhealth.mothership.Test.Phone.javaDescriptor.getEnumTypes.get(0)
    def scalaDescriptor: _root_.scalapb.descriptors.EnumDescriptor = com.rallyhealth.mothership.Test.Phone.scalaDescriptor.enums(0)
  }
  implicit class PhoneLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, com.rallyhealth.mothership.Test.Phone]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, com.rallyhealth.mothership.Test.Phone](_l) {
    def id: _root_.scalapb.lenses.Lens[UpperPB, com.rallyhealth.mothership.Test.UUID] = field(_.getId)((c_, f_) => c_.copy(id = Option(f_)))
    def optionalId: _root_.scalapb.lenses.Lens[UpperPB, scala.Option[com.rallyhealth.mothership.Test.UUID]] = field(_.id)((c_, f_) => c_.copy(id = f_))
    def countryCode: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.countryCode)((c_, f_) => c_.copy(countryCode = f_))
    def areaNumber: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.areaNumber)((c_, f_) => c_.copy(areaNumber = f_))
    def phoneNumber: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.phoneNumber)((c_, f_) => c_.copy(phoneNumber = f_))
    def `type`: _root_.scalapb.lenses.Lens[UpperPB, com.rallyhealth.mothership.Test.Phone.PhoneType] = field(_.`type`)((c_, f_) => c_.copy(`type` = f_))
  }
  final val ID_FIELD_NUMBER = 1
  final val COUNTRY_CODE_FIELD_NUMBER = 2
  final val AREA_NUMBER_FIELD_NUMBER = 3
  final val PHONE_NUMBER_FIELD_NUMBER = 4
  final val TYPE_FIELD_NUMBER = 5
}
