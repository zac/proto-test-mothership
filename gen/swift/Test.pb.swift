// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: Test.proto
//
// For information on using the generated types, please see the documenation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct Com_Rallyhealth_Mothership_UUID {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var id: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Com_Rallyhealth_Mothership_Contact {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var id: Com_Rallyhealth_Mothership_UUID {
    get {return _storage._id ?? Com_Rallyhealth_Mothership_UUID()}
    set {_uniqueStorage()._id = newValue}
  }
  /// Returns true if `id` has been explicitly set.
  var hasID: Bool {return _storage._id != nil}
  /// Clears the value of `id`. Subsequent reads from it will return its default value.
  mutating func clearID() {_storage._id = nil}

  var firstName: String {
    get {return _storage._firstName}
    set {_uniqueStorage()._firstName = newValue}
  }

  var middleName: String {
    get {return _storage._middleName}
    set {_uniqueStorage()._middleName = newValue}
  }

  var lastName: String {
    get {return _storage._lastName}
    set {_uniqueStorage()._lastName = newValue}
  }

  var phone: [Com_Rallyhealth_Mothership_Phone] {
    get {return _storage._phone}
    set {_uniqueStorage()._phone = newValue}
  }

  var address: [Com_Rallyhealth_Mothership_Address] {
    get {return _storage._address}
    set {_uniqueStorage()._address = newValue}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct Com_Rallyhealth_Mothership_Address {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var id: Com_Rallyhealth_Mothership_UUID {
    get {return _storage._id ?? Com_Rallyhealth_Mothership_UUID()}
    set {_uniqueStorage()._id = newValue}
  }
  /// Returns true if `id` has been explicitly set.
  var hasID: Bool {return _storage._id != nil}
  /// Clears the value of `id`. Subsequent reads from it will return its default value.
  mutating func clearID() {_storage._id = nil}

  var streetLine1: String {
    get {return _storage._streetLine1}
    set {_uniqueStorage()._streetLine1 = newValue}
  }

  var streetLine2: String {
    get {return _storage._streetLine2}
    set {_uniqueStorage()._streetLine2 = newValue}
  }

  var city: String {
    get {return _storage._city}
    set {_uniqueStorage()._city = newValue}
  }

  var state: String {
    get {return _storage._state}
    set {_uniqueStorage()._state = newValue}
  }

  var zip: String {
    get {return _storage._zip}
    set {_uniqueStorage()._zip = newValue}
  }

  var country: String {
    get {return _storage._country}
    set {_uniqueStorage()._country = newValue}
  }

  var label: Com_Rallyhealth_Mothership_Address.AddressLabel {
    get {return _storage._label}
    set {_uniqueStorage()._label = newValue}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum AddressLabel: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case none // = 0
    case other // = 1
    case home // = 2
    case work // = 3
    case doctor // = 4
    case UNRECOGNIZED(Int)

    init() {
      self = .none
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .none
      case 1: self = .other
      case 2: self = .home
      case 3: self = .work
      case 4: self = .doctor
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    var rawValue: Int {
      switch self {
      case .none: return 0
      case .other: return 1
      case .home: return 2
      case .work: return 3
      case .doctor: return 4
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

#if swift(>=4.2)

extension Com_Rallyhealth_Mothership_Address.AddressLabel: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [Com_Rallyhealth_Mothership_Address.AddressLabel] = [
    .none,
    .other,
    .home,
    .work,
    .doctor,
  ]
}

#endif  // swift(>=4.2)

struct Com_Rallyhealth_Mothership_Phone {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var id: Com_Rallyhealth_Mothership_UUID {
    get {return _storage._id ?? Com_Rallyhealth_Mothership_UUID()}
    set {_uniqueStorage()._id = newValue}
  }
  /// Returns true if `id` has been explicitly set.
  var hasID: Bool {return _storage._id != nil}
  /// Clears the value of `id`. Subsequent reads from it will return its default value.
  mutating func clearID() {_storage._id = nil}

  var countryCode: String {
    get {return _storage._countryCode}
    set {_uniqueStorage()._countryCode = newValue}
  }

  var areaNumber: String {
    get {return _storage._areaNumber}
    set {_uniqueStorage()._areaNumber = newValue}
  }

  var phoneNumber: String {
    get {return _storage._phoneNumber}
    set {_uniqueStorage()._phoneNumber = newValue}
  }

  var type: Com_Rallyhealth_Mothership_Phone.PhoneType {
    get {return _storage._type}
    set {_uniqueStorage()._type = newValue}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum PhoneType: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case none // = 0
    case other // = 1
    case mobile // = 2
    case landline // = 3
    case fax // = 4
    case tty // = 5
    case UNRECOGNIZED(Int)

    init() {
      self = .none
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .none
      case 1: self = .other
      case 2: self = .mobile
      case 3: self = .landline
      case 4: self = .fax
      case 5: self = .tty
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    var rawValue: Int {
      switch self {
      case .none: return 0
      case .other: return 1
      case .mobile: return 2
      case .landline: return 3
      case .fax: return 4
      case .tty: return 5
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

#if swift(>=4.2)

extension Com_Rallyhealth_Mothership_Phone.PhoneType: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [Com_Rallyhealth_Mothership_Phone.PhoneType] = [
    .none,
    .other,
    .mobile,
    .landline,
    .fax,
    .tty,
  ]
}

#endif  // swift(>=4.2)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "com.rallyhealth.mothership"

extension Com_Rallyhealth_Mothership_UUID: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".UUID"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.id)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  func _protobuf_generated_isEqualTo(other: Com_Rallyhealth_Mothership_UUID) -> Bool {
    if self.id != other.id {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Com_Rallyhealth_Mothership_Contact: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Contact"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .standard(proto: "first_name"),
    3: .standard(proto: "middle_name"),
    4: .standard(proto: "last_name"),
    5: .same(proto: "phone"),
    6: .same(proto: "address"),
  ]

  fileprivate class _StorageClass {
    var _id: Com_Rallyhealth_Mothership_UUID? = nil
    var _firstName: String = String()
    var _middleName: String = String()
    var _lastName: String = String()
    var _phone: [Com_Rallyhealth_Mothership_Phone] = []
    var _address: [Com_Rallyhealth_Mothership_Address] = []

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _id = source._id
      _firstName = source._firstName
      _middleName = source._middleName
      _lastName = source._lastName
      _phone = source._phone
      _address = source._address
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._id)
        case 2: try decoder.decodeSingularStringField(value: &_storage._firstName)
        case 3: try decoder.decodeSingularStringField(value: &_storage._middleName)
        case 4: try decoder.decodeSingularStringField(value: &_storage._lastName)
        case 5: try decoder.decodeRepeatedMessageField(value: &_storage._phone)
        case 6: try decoder.decodeRepeatedMessageField(value: &_storage._address)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._id {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if !_storage._firstName.isEmpty {
        try visitor.visitSingularStringField(value: _storage._firstName, fieldNumber: 2)
      }
      if !_storage._middleName.isEmpty {
        try visitor.visitSingularStringField(value: _storage._middleName, fieldNumber: 3)
      }
      if !_storage._lastName.isEmpty {
        try visitor.visitSingularStringField(value: _storage._lastName, fieldNumber: 4)
      }
      if !_storage._phone.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._phone, fieldNumber: 5)
      }
      if !_storage._address.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._address, fieldNumber: 6)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  func _protobuf_generated_isEqualTo(other: Com_Rallyhealth_Mothership_Contact) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let other_storage = _args.1
        if _storage._id != other_storage._id {return false}
        if _storage._firstName != other_storage._firstName {return false}
        if _storage._middleName != other_storage._middleName {return false}
        if _storage._lastName != other_storage._lastName {return false}
        if _storage._phone != other_storage._phone {return false}
        if _storage._address != other_storage._address {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Com_Rallyhealth_Mothership_Address: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Address"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .standard(proto: "street_line_1"),
    3: .standard(proto: "street_line_2"),
    4: .same(proto: "city"),
    5: .same(proto: "state"),
    6: .same(proto: "zip"),
    7: .same(proto: "country"),
    8: .same(proto: "label"),
  ]

  fileprivate class _StorageClass {
    var _id: Com_Rallyhealth_Mothership_UUID? = nil
    var _streetLine1: String = String()
    var _streetLine2: String = String()
    var _city: String = String()
    var _state: String = String()
    var _zip: String = String()
    var _country: String = String()
    var _label: Com_Rallyhealth_Mothership_Address.AddressLabel = .none

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _id = source._id
      _streetLine1 = source._streetLine1
      _streetLine2 = source._streetLine2
      _city = source._city
      _state = source._state
      _zip = source._zip
      _country = source._country
      _label = source._label
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._id)
        case 2: try decoder.decodeSingularStringField(value: &_storage._streetLine1)
        case 3: try decoder.decodeSingularStringField(value: &_storage._streetLine2)
        case 4: try decoder.decodeSingularStringField(value: &_storage._city)
        case 5: try decoder.decodeSingularStringField(value: &_storage._state)
        case 6: try decoder.decodeSingularStringField(value: &_storage._zip)
        case 7: try decoder.decodeSingularStringField(value: &_storage._country)
        case 8: try decoder.decodeSingularEnumField(value: &_storage._label)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._id {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if !_storage._streetLine1.isEmpty {
        try visitor.visitSingularStringField(value: _storage._streetLine1, fieldNumber: 2)
      }
      if !_storage._streetLine2.isEmpty {
        try visitor.visitSingularStringField(value: _storage._streetLine2, fieldNumber: 3)
      }
      if !_storage._city.isEmpty {
        try visitor.visitSingularStringField(value: _storage._city, fieldNumber: 4)
      }
      if !_storage._state.isEmpty {
        try visitor.visitSingularStringField(value: _storage._state, fieldNumber: 5)
      }
      if !_storage._zip.isEmpty {
        try visitor.visitSingularStringField(value: _storage._zip, fieldNumber: 6)
      }
      if !_storage._country.isEmpty {
        try visitor.visitSingularStringField(value: _storage._country, fieldNumber: 7)
      }
      if _storage._label != .none {
        try visitor.visitSingularEnumField(value: _storage._label, fieldNumber: 8)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  func _protobuf_generated_isEqualTo(other: Com_Rallyhealth_Mothership_Address) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let other_storage = _args.1
        if _storage._id != other_storage._id {return false}
        if _storage._streetLine1 != other_storage._streetLine1 {return false}
        if _storage._streetLine2 != other_storage._streetLine2 {return false}
        if _storage._city != other_storage._city {return false}
        if _storage._state != other_storage._state {return false}
        if _storage._zip != other_storage._zip {return false}
        if _storage._country != other_storage._country {return false}
        if _storage._label != other_storage._label {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Com_Rallyhealth_Mothership_Address.AddressLabel: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "NONE"),
    1: .same(proto: "OTHER"),
    2: .same(proto: "HOME"),
    3: .same(proto: "WORK"),
    4: .same(proto: "DOCTOR"),
  ]
}

extension Com_Rallyhealth_Mothership_Phone: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Phone"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .standard(proto: "country_code"),
    3: .standard(proto: "area_number"),
    4: .standard(proto: "phone_number"),
    5: .same(proto: "type"),
  ]

  fileprivate class _StorageClass {
    var _id: Com_Rallyhealth_Mothership_UUID? = nil
    var _countryCode: String = String()
    var _areaNumber: String = String()
    var _phoneNumber: String = String()
    var _type: Com_Rallyhealth_Mothership_Phone.PhoneType = .none

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _id = source._id
      _countryCode = source._countryCode
      _areaNumber = source._areaNumber
      _phoneNumber = source._phoneNumber
      _type = source._type
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._id)
        case 2: try decoder.decodeSingularStringField(value: &_storage._countryCode)
        case 3: try decoder.decodeSingularStringField(value: &_storage._areaNumber)
        case 4: try decoder.decodeSingularStringField(value: &_storage._phoneNumber)
        case 5: try decoder.decodeSingularEnumField(value: &_storage._type)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._id {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if !_storage._countryCode.isEmpty {
        try visitor.visitSingularStringField(value: _storage._countryCode, fieldNumber: 2)
      }
      if !_storage._areaNumber.isEmpty {
        try visitor.visitSingularStringField(value: _storage._areaNumber, fieldNumber: 3)
      }
      if !_storage._phoneNumber.isEmpty {
        try visitor.visitSingularStringField(value: _storage._phoneNumber, fieldNumber: 4)
      }
      if _storage._type != .none {
        try visitor.visitSingularEnumField(value: _storage._type, fieldNumber: 5)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  func _protobuf_generated_isEqualTo(other: Com_Rallyhealth_Mothership_Phone) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let other_storage = _args.1
        if _storage._id != other_storage._id {return false}
        if _storage._countryCode != other_storage._countryCode {return false}
        if _storage._areaNumber != other_storage._areaNumber {return false}
        if _storage._phoneNumber != other_storage._phoneNumber {return false}
        if _storage._type != other_storage._type {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Com_Rallyhealth_Mothership_Phone.PhoneType: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "NONE"),
    1: .same(proto: "OTHER"),
    2: .same(proto: "MOBILE"),
    3: .same(proto: "LANDLINE"),
    4: .same(proto: "FAX"),
    5: .same(proto: "TTY"),
  ]
}
